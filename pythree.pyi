from typing import overload


class Geometry:
    def __init__(self: Geometry, vertices: list[float] = None, uvs: list[float]
                 = None, normals: list[float] = None) -> None: ...

    def set_normals(self: Geometry, normals: list[float]) -> None: ...
    def set_vertices(self: Geometry, vertices: list[float]) -> None: ...
    def set_uvs(self: Geometry, uvs: list[float]) -> None: ...

    def get_normals(self: Geometry) -> list[float]: ...
    def get_vertices(self: Geometry) -> list[float]: ...
    def get_uvs(self: Geometry) -> list[float]: ...

    def get_normals_as_bytes(self: Geometry) -> bytes: ...
    def get_vertices_as_bytes(self: Geometry) -> bytes: ...
    def get_uvs_as_bytes(self: Geometry) -> bytes: ...


class Matrix:
    @overload
    def __init__(self: Matrix, elements: list[float] = None) -> None: ...

    @overload
    def __init__(self: Matrix, elements: list[list[float]] = None) -> None: ...

    def to_bytes(self: Matrix) -> bytes: ...
    def clone(self: Matrix) -> Matrix: ...

    @staticmethod
    def from_rotation_shift_scale(
        rotation: list[float], shift: list[float], scale: list[float]) -> Matrix: ...

    @staticmethod
    def perspective(fovy: float, aspect: float,
                    near: float, far: float) -> Matrix: ...

    @staticmethod
    def identity() -> Matrix: ...
